piv.col<-step[1]
row.order<-step[2]
elim <- diag(nrow = nrow(M))
elim[piv.col+row.order,piv.col] <- (-1)*(M[piv.col,piv.col]/M[piv.col+row.order,piv.col])**(-1)
elim <- as.matrix(elim)
return(elim)}
set.seed(59)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
steps.4 <- matrix(c(1,1,1,2,2,3,1,2,3,1,2,1),6,2)
steps.5 <- matrix(c(1,1,1,1,2,2,2,3,3,4,1,2,3,4,1,2,3,1,2,1), 10,2)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
set.seed(832)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
elim.list.4
set.seed(8032)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
set.seed(8033452)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
elim.list.5 <-vector("list", nrow(steps.5))
for(i in (1:nrow(steps.5))){
elim.list.5[[i]]<-elim.matrix(C,steps.5[i,])}
(L.5 <- solve(elim.list.5[[1]]) %*% solve(elim.list.5[[2]]) %*% solve(elim.list.5[[3]]) %*% solve(elim.list.5[[4]]) %*% solve(elim.list.5[[5]]) %*% solve(elim.list.5[[6]]) %*% solve(elim.list.5[[7]]) %*% solve(elim.list.5[[8]]) %*% solve(elim.list.5[[9]]) %*% solve(elim.list.5[[10]]))
(U.5 <- elim.list.5[[10]] %*% elim.list.5[[9]] %*% elim.list.5[[8]] %*% elim.list.5[[7]] %*% elim.list.5[[6]] %*% elim.list.5[[5]] %*% elim.list.5[[4]] %*% elim.list.5[[3]] %*% elim.list.5[[2]] %*% elim.list.5[[1]] %*% C)
L.5 %*% U.5 == C
elim.list.4
set.seed(33452)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
elim.list.4
set.seed(3375452)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
elim.list.5 <-vector("list", nrow(steps.5))
for(i in (1:nrow(steps.5))){
elim.list.5[[i]]<-elim.matrix(C,steps.5[i,])}
(L.5 <- solve(elim.list.5[[1]]) %*% solve(elim.list.5[[2]]) %*% solve(elim.list.5[[3]]) %*% solve(elim.list.5[[4]]) %*% solve(elim.list.5[[5]]) %*% solve(elim.list.5[[6]]) %*% solve(elim.list.5[[7]]) %*% solve(elim.list.5[[8]]) %*% solve(elim.list.5[[9]]) %*% solve(elim.list.5[[10]]))
(U.5 <- elim.list.5[[10]] %*% elim.list.5[[9]] %*% elim.list.5[[8]] %*% elim.list.5[[7]] %*% elim.list.5[[6]] %*% elim.list.5[[5]] %*% elim.list.5[[4]] %*% elim.list.5[[3]] %*% elim.list.5[[2]] %*% elim.list.5[[1]] %*% C)
L.5 %*% U.5 == C
U.5
set.seed(98425)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
set.seed(9823425)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
set.seed(425)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
set.seed(22425)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
set.seed(224)
B <- sample(0:10, 16, replace=T)
B <- matrix(data = B, 4, 4)
solve(B)
C <- sample(1:10, 25, replace=T)
C <- matrix(C, 5, 5)
solve(C)
elim.list.4 <-vector("list", nrow(steps.4))
for(i in (1:nrow(steps.4))){
elim.list.4[[i]]<-elim.matrix(B,steps.4[i,])}
#Hard-coding the final dot products is a bad solution. Need to get this into an apply function...but it is proving difficult to work with a list of matrices.
(L.4 <- solve(elim.list.4[[1]]) %*% solve(elim.list.4[[2]]) %*% solve(elim.list.4[[3]]) %*% solve(elim.list.4[[4]]) %*% solve(elim.list.4[[5]]) %*% solve(elim.list.4[[6]]) )
(U.4 <- elim.list.4[[6]] %*% elim.list.4[[5]] %*% elim.list.4[[4]] %*% elim.list.4[[3]] %*% elim.list.4[[2]] %*% elim.list.4[[1]] %*% B)
L.4 %*% U.4 == B
elim.list.5 <-vector("list", nrow(steps.5))
for(i in (1:nrow(steps.5))){
elim.list.5[[i]]<-elim.matrix(C,steps.5[i,])}
(L.5 <- solve(elim.list.5[[1]]) %*% solve(elim.list.5[[2]]) %*% solve(elim.list.5[[3]]) %*% solve(elim.list.5[[4]]) %*% solve(elim.list.5[[5]]) %*% solve(elim.list.5[[6]]) %*% solve(elim.list.5[[7]]) %*% solve(elim.list.5[[8]]) %*% solve(elim.list.5[[9]]) %*% solve(elim.list.5[[10]]))
(U.5 <- elim.list.5[[10]] %*% elim.list.5[[9]] %*% elim.list.5[[8]] %*% elim.list.5[[7]] %*% elim.list.5[[6]] %*% elim.list.5[[5]] %*% elim.list.5[[4]] %*% elim.list.5[[3]] %*% elim.list.5[[2]] %*% elim.list.5[[1]] %*% C)
L.5 %*% U.5 == C
L.5 %*% U.5 - C
A
A = matrix(c(1,2,3,-1,0,4), 2, 3)
A
X <- A%*%t(A)
Y <- t(A)%*%A
(eigen.X <- eigen(X))
(eigen.Y <- eigen(Y))
(svd.A <- svd(A))
svd.A$u
eigen.X$vectors
all.equal(svd.A$u, eigen.X$vectors )
(eigen.X <- eigen(X))
all.equal(eigen.X$values, eigen.Y$values[1:2])
all.equal(eigen.X$values, (svd.A$d)^2)
all.equal(eigen.Y$values, (svd.A$d)^2)
svd.A
eigen.X
svd.A$u %*% eigen.X$vectors
all.equal(svd.A$u, eigen.X$vectors)
eigen.X$vectors
svd.A$u
matrix(c(0,1,-1,0), 2, 2)
eigen.X$vectors%*%matrix(c(0,1,-1,0), 2, 2)
all.equal(svd.A$u, t(eigen.X$vectors))
svd.A$u
eigen.X$vectors
eigen.X$vectors%*%matrix(c(-1,0,0,1), 2, 2)
eigen.X$vectors%*%matrix(c(0,0,-1,-1), 2, 2)
eigen.X$vectors%*%matrix(c(0,-1,-1,0), 2, 2)
eigen.X$vectors
svd.A$u
eigen.X$vectors%*%matrix(c(0,1,-1,0), 2, 2)
eigen.X$vectors%*%matrix(c(0,-1,1,0), 2, 2)
eigen.X$vectors%*%matrix(c(1,0,0,-1), 2, 2)
svd.A$u
all.equal(svd.A$u, eigen.X.adjusted)
eigen.X.adjusted<-eigen.X$vectors%*%matrix(c(1,0,0,-1), 2, 2)
all.equal(svd.A$u, eigen.X.adjusted)
A<- matrix(c(1,1,1,1,0,1,2,3,4), 2, 2)
b<- c(0,8,8,20)
left <-t(A)%*%A
right <-t(A)%*%b
A
A<- matrix(c(1,1,1,1,0,1,2,3,4), 4, 2)
A<- matrix(c(1,1,1,1,0,1,2,3,4), 4, 2)
A<- matrix(c(1,1,1,1,0,1,3,4), 4, 2)
b<- c(0,8,8,20)
left <-t(A)%*%A
right <-t(A)%*%b
left
right
x.hat <-right/left
x.hat <-right%*%left^-1
x.hat <-right%*%left
x.hat <-left%*%right
x.hat
A<- matrix(c(1,1,1,1,0,1,3,4), 4, 2)
b<- c(0,8,8,20)
left <-t(A)%*%A
right <-t(A)%*%b
x.hat <- solve(left)%*%right
x.hat
solve.LS <-function(A,b){
x.hat <- solve(t(A)%*%A)%*%(t(A)%*%b)
return(x.hat)
}
solve.LS(A,b)
solve.LS(matrix(c(2,-2,5,-2,2,3), 3, 2), c(-1,7,-26))
solve.LS(A, c(1,5,13,17))
solve.LS <-function(A,b){
x.hat <- solve(t(A)%*%A)%*%(t(A)%*%b)
return(x.hat)
}
solve.LS(A,b)
solve.LS(matrix(c(2,-2,5,-2,2,3), 3, 2), c(-1,7,-26))
solve.LS(A, c(1,5,13,17))
solve.LS(A, c(1,5,15,17))
sample(1:3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
cars <- read.csv("auto-mpg.data.csv", stringsAsFactors = F)
setwd("~/Documents/Graduate School/IS 605 - Computational Mathematics/Assignment_5")
cars <- read.csv("auto-mpg.data.csv", stringsAsFactors = F)
cars <- read.csv("auto-mpg.data.csv", stringsAsFactors = F)
cars <- read.csv("auto-mpg.data", stringsAsFactors = F)
cars
str(cars)
cars <- read.csv("auto-mpg.data")
str(cars)
solve.LS(matrix(c(1,1,1,-1,2,1), 3, 2), c(2,1,4))
3/7
10/7
solve.LS(matrix(c(2,-2,5,-2,2,3), 3, 2), c(-1,7,-26))
solve.LS(A, c(1,5,13,17))
x.hat <- solve.LS(A,b)
sq.error<-dist(x.hat)
sq.error
A.2<- matrix(c(1,1,1,1,1,2,3,4),4,2)
b.2<- c(1,3,3,5)
A.2
solve.LS(A.2, b.2)
6/5
A<- matrix(c(1,1,1,1,0,1,3,4), 4, 2)
b<- c(0,8,8,20)
left <-t(A)%*%A
right <-t(A)%*%b
x.hat <- solve(left)%*%right
solve.LS <-function(A,b){
x.hat <- solve(t(A)%*%A)%*%(t(A)%*%b)
return(x.hat)
}
(x.hat <- solve.LS(A,b))
error <- A %*% x.hat
error
residuals <-b - (A %*% x.hat)
residuals
error <-dist(residuals)
error
?dist
error <-dist(x=residuals, method="euclidean", diag=F, upper=F)
error
?length
error <-length(residuals)
error
solve.LS(A, c(1,5,13,17))
(x.hat <- solve.LS(A,b))
A.1<- matrix(c(1,1,1,1,0,1,3,4), 4, 2)
b.1<- c(0,8,8,20)
left <-t(A.1)%*%A.1
right <-t(A.1)%*%b.1
x.hat <- solve(left)%*%right
x.hat
(x.hat <- solve.LS(A.1,b.1))
solve.LS(A.1, c(1,5,13,17))
solve.LS(A.1, b = c(1,5,13,17))
A.1<- matrix(c(1,1,1,1,0,1,3,4), 4, 2)
b.1<- c(0,8,8,20)
solve.LS(A.1, b = c(1,5,13,17))
solve.LS <-function(A,b){
x.hat <- solve(t(A)%*%A)%*%(t(A)%*%b)
return(x.hat)
}
b.2 = c(1,5,13,17)
solve.LS(A.1, b.2)
b.2 = c(1,5,13,17)
x.hat.2 <-solve.LS(A.1, b.2)
residuals.2 <-b.2 - (A.1 %*% x.hat.2)
error <-length(residuals.2)
error
(residuals.2 <-b.2 - (A.1 %*% x.hat.2))
(error.2 <-length(residuals.2))
residuals.2
residuals.2[1]
residuals.2[,1]
(error.2 <-length(residuals.2[,1]))
zapsmall(error.2)
error.2
residuals.2
zapsmall(error.2)
zapsmall(residuals.2)
zapsmall(residuals.2[,1])
?zapsmall
zapsmall(residuals.2[,1], digits = 1)
zapsmall(residuals.2[,1], digits = 0)
(error.2 <-length(zapsmall(residuals.2[,1], digits = 0)))
dist(error.2)
dist(error)
solve.LS <-function(A,b){
x.hat <- solve(t(A)%*%A)%*%(t(A)%*%b)
return(x.hat)
}
A.1<- matrix(c(1,1,1,1,0,1,3,4), 4, 2)
b.1<- c(0,8,8,20)
left <-t(A.1)%*%A.1
right <-t(A.1)%*%b.1
x.hat <- solve(left)%*%right
(residuals.1 <-b - (A.1 %*% x.hat))
(error.1 <-dist(residuals.1))
(residuals.1 <-b - (A.1 %*% x.hat))
(residuals.1 <-b.1 - (A.1 %*% x.hat))
(error.1 <-dist(residuals.1))
length(c(0,0,1))
length(c(0,0,0))
length(c(0,0,0,4))
length(c(0,0,0,9))
dist(c(0,0,0,9))
dist(c(0,0,0))
dist(c(0,0,1))
(error.1 <-dist(residuals.1))
(error.1 <-dist(residuals.1)[1,4])
(error.1 <-dist(residuals.1)[1,1])
error.1[1,4]
error.1[1,3]
error.1[3,1]
error.1
error.1[4]
error.1[1,4]
error.1[1,1]
str(error.1)
?dist
error.1[6
]
error.1[1]
error.1[2]
error.1[3]
(residuals.1 <-b.1 - (A.1 %*% x.hat))
error.1 <-dist(residuals.1)
error.1[3]
(residuals.2 <-b.2 - (A.1 %*% x.hat.2))
error.2 <-dist(zapsmall(residuals.2, digits = 0))
error.2[3]
x.hat.2 <-solve.LS(A.1, b.2)
(residuals.2 <-b.2 - (A.1 %*% x.hat.2))
error.2 <-dist(zapsmall(residuals.2, digits = 0))
error.2[3]
b.2 = c(1,5,13,17)
x.hat.2 <-solve.LS(A.1, b.2)
(residuals.2 <-b.2 - (A.1 %*% x.hat.2))
error.2 <-dist(zapsmall(residuals.2, digits = 0))
error.2[3]
b.1-b.2
error.1%*%b.2
error.1
(e <-b.1-b.2)
e%*%b.2
0 == e%*%b.2
A.1
A.1[,1]
0 == e%*%A.1[,1]
0 == e%*%A.1[,2]
(e <-b.1-b.2)
(residuals.1 <-b.1 - (A.1 %*% x.hat))
cars <- read.csv("auto-mpg.data")
cars
str(cars)
cars <- read.csv("auto-mpg.data", header = F)
str(cars)
cars <- read("auto-mpg.data", header = F, stringsAsFactors = F)
?read
?read.csv2
cars <- read.csv2("auto-mpg.data", header = F, stringsAsFactors = F)
str(cars)
library(readr)
install.packages("readr")
library(readr)
cars <- read_csv(file="auto-mpg.data", col_names=F)
cars
str(cars)
str(cars[1])
str(cars[2])
cars <- read_csv(file="auto-mpg.csv", col_names=F)
str(cars)
cars
col.names = c("displacement", "horsepower", "weight", "acceleration", "mpg")
cars <- read_csv(file="auto-mpg.csv", col_names=col.names)
str(cars)
cars[,1:4]
?"matrix"
A.cars <-as.matrix(cars[,1:4])
str(A.cars)
A.cars
b.cars <- as.matrix(cars[,5])
solve.LS(A.cars, b.cars)
residuals.cars <- b.cars - (A.cars %*% x.hat.cars)
x.hat.cars <- solve.LS(A.cars, b.cars)
residuals.cars <- b.cars - (A.cars %*% x.hat.cars)
residuals.cars
error.cars <- dist(residuals.cars)
residuals.cars
error.cars <- dist(residuals.cars)
error.cars
error.cars[1]
error.cars[2]
error.cars[3]
str(error.cars)
?rdist
error.1
?dist
residuals.cars <- b.cars - (A.cars %*% x.hat.cars)
error.cars <- dist(residuals.cars)
str(error.cars)
str(A.cars)
str(b.cars)
str(A.cars %*% x.hat.cars)
str(residuals.cars)
392**2
residuals.cars <- b.cars - (A.cars %*% x.hat.cars)
error.cars <- dist(residuals.cars)
str(error.cars)
residuals.1
length(residuals.1)
length(residuals.2)
?length
(sqrt(residuals.cars%*%residuals.cars))
v = c(3, -4)
(sqrt(v%*%v))
residuals.cars
str(residuals.cars)
residuals.cars[1,]
residuals.cars[,1]
str(residuals.cars[,1])
(sqrt(residuals.cars[,1]%*%residuals.cars[,1]))
x.hat.cars <- solve.LS(A.cars, b.cars)
x.hat.cars
cars.scaled <- scale(cars)
A.cars.scaled <- as.matrix(cars.scaled[,1:4])
b.cars.scaled <- as.matrix(cars.scaled[,5])
cars.scaled
x.hat.cars.scaled <- solve.LS(A.cars.scaled, b.cars.scaled)
residuals.cars.scaled <- b.cars.scaled - (A.cars.scaled %*% x.hat.cars.scaled)
(error.cars<-(sqrt(residuals.cars.scaled[,1]%*%residuals.cars.scaled[,1])))
residuals.cars <- b.cars - (A.cars %*% x.hat.cars)
(error.cars<-(sqrt(residuals.cars[,1]%*%residuals.cars[,1])))
