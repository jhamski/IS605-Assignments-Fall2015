1+1
require(magrittr)
require(rvest)
require(tm)
require(dplyr)
require(SnowballC)
require(RWeka)
setwd("~/Documents/R/IS605-Assignment_6")
span <- 1 # how many words either side of word of interest
span1 <- 1 + span * 2
ngramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = span1, max = span1))
dtm <- TermDocumentMatrix(enron.corpus, control = list(tokenize = ngramTokenizer))
inspect(dtm)
ngramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = span1, max = span1))
dtm <- TermDocumentMatrix(enron.corpus, control = list(tokenize = ngramTokenizer))
source.1 <- DirSource("enronsent/") #input path for documents
enron.corpus <- Corpus(source.1, readerControl=list(reader=readPlain))
enron.corpus <- enron.corpus %>%
tm_map(content_transformer(function(x) iconv(x, to='UTF-8-MAC', sub='byte')), mc.cores=1)%>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace) %>%
tm_map(content_transformer(tolower))%>%
tm_map(stemDocument)
dtm <- TermDocumentMatrix(enron.corpus, control = list(tokenize = ngramTokenizer))
inspect(dtm)
word <- 'thank'
subset_ngrams <- dtm$dimnames$Terms[grep(word, dtm$dimnames$Terms)]
subset_ngrams
dtm$dimnames
dtm$dimnames$enronsent00
dtm$dimnames$enronsent00
dtm
library(RWeka)
span <- 2 # how many words either side of word of interest
span1 <- 1 + span * 2
ngramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = span1, max = span1))
dtm <- TermDocumentMatrix(enron.corpus, control = list(tokenize = ngramTokenizer))
inspect(dtm)
span <- 4 # how many words either side of word of interest
span1 <- 1 + span * 2
ngramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = span1, max = span1))
dtm <- TermDocumentMatrix(enron.corpus, control = list(tokenize = ngramTokenizer))
inspect(dtm)
?TermDocumentMatrix
sim.count <- 10
probability <-
replicate(sim.count, sample(c(1:3651), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print
probability <-
replicate(sim.count, sample(c(1:25), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
prin
probability <-
replicate(sim.count, sample(c(1:25), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print
probability <-
replicate(sim.count, sample(c(1:25), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print
sim.count <- 10
probability <-
replicate(sim.count, sample(c(1:25), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print %>%
as.list
sim.count <- 10
probability <-
replicate(sim.count, sample(c(1:25), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print %>%
as.list %>%
equals(0)
sim.count <- 10
probability <-
replicate(sim.count, sample(c(1:25), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print %>%
as.list %>%
equals(0) %>%
print
sim.count <- 10
matched.birthdays <-
replicate(sim.count, sample(c(1:250), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print %>%
as.list %>%
equals(0) %>%
print
matched.birthdays
sum(matched.birthdays==TRUE)
sim.count <- 10
matched.birthdays <-
replicate(sim.count, sample(c(1:250), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print %>%
as.list %>%
equals(0) %>%
print
cnt.matched.birthdays <- sum(matched.birthdays==TRUE)
(probability <- cnt.matched.birthdays/sim.count)
sim.count <- 10
matched.birthdays <-
replicate(sim.count, sample(c(1:250), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print %>%
as.list %>%
equals(0) %>%
print
cnt.matched.birthdays <- sum(matched.birthdays==TRUE)
(probability <- cnt.matched.birthdays/sim.count)
sim.count <- 10
matched.birthdays <-
replicate(sim.count, sample(c(1:250), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print %>%
as.list %>%
equals(0) %>%
print
cnt.matched.birthdays <- sum(matched.birthdays==TRUE)
(probability <- cnt.matched.birthdays/sim.count)
sim.count <- 10
matched.birthdays <-
replicate(sim.count, sample(c(1:250), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print %>%
as.list %>%
equals(0) %>%
print
cnt.matched.birthdays <- sum(matched.birthdays==TRUE)
(probability <- cnt.matched.birthdays/sim.count)
sim.count <- 100000
matched.birthdays <-
replicate(sim.count, sample(c(1:365), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
print %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
print %>%
as.list %>%
equals(0) %>%
print
cnt.matched.birthdays <- sum(matched.birthdays==TRUE)
(probability <- cnt.matched.birthdays/sim.count)
sim.count <- 100000
matched.birthdays <-
replicate(sim.count, sample(c(1:365), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
as.list %>%
equals(0)
cnt.matched.birthdays <- sum(matched.birthdays==TRUE)
(probability.25 <- cnt.matched.birthdays/sim.count)
sim.count <- 100000
matched.birthdays <-
replicate(sim.count, sample(c(1:365), 50, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
as.list %>%
equals(0)
cnt.matched.birthdays <- sum(matched.birthdays==TRUE)
(probability.25 <- cnt.matched.birthdays/sim.count)
sim.count <- 100000
matched.birthdays <-
replicate(sim.count, sample(c(1:365), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
as.list %>%
equals(0)
cnt.matched.birthdays <- sum(matched.birthdays==TRUE)
(probability.25 <- cnt.matched.birthdays/sim.count)
sim.count <- 100000
matched.birthdays <-
replicate(sim.count, sample(c(1:365), 5, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
as.list %>%
equals(0)
cnt.matched.birthdays <- sum(matched.birthdays==TRUE)
(probability.25 <- cnt.matched.birthdays/sim.count)
sim.count <- 100000
matched.birthdays <-
replicate(sim.count, sample(c(1:365), 5, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
as.list %>%
equals(0)
cnt.matched.birthdays <- sum(matched.birthdays==FALSE)
(probability.25 <- cnt.matched.birthdays/sim.count)
sim.count <- 100000
matched.birthdays <-
replicate(sim.count, sample(c(1:365), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
as.list %>%
equals(0)
cnt.matched.birthdays <- sum(matched.birthdays==FALSE)
(probability.25 <- cnt.matched.birthdays/sim.count)
matched.birthdays <-
replicate(sim.count, sample(c(1:365), 50, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
as.list %>%
equals(0)
cnt.matched.birthdays <- sum(matched.birthdays==FALSE)
(probability.50 <- cnt.matched.birthdays/sim.count)
sim.count <- 100000
nomatched.birthdays <-
replicate(sim.count, sample(c(1:365), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
as.list %>%
equals(0)
cnt.nomatched.birthdays <- sum(nomatched.birthdays==FALSE)
(probability.25 <- cnt.nomatched.birthdays/sim.count)
n = 25
d = 365
1-(1-(n/2d))^(n-1)
1-(1-(n/2*d))^(n-1)
1-((1-(n/2*d))^(n-1))
?e
1-exp(1)^(-n(n-1)/2*d)
1-exp(1)^(-n*(n-1)/2*d)
n = 25
d = 365
1-exp(1)^(-n*(n-1)/2*d)
exp(1)
1-exp(1)^((-n*(n-1)/2*d))
exp(1)^((-n*(n-1)/2*d))
((-n*(n-1)/2*d))
(n-1)/2*d
(((-n)*(n-1)/2*d))
1-((1-(n/2*d))^(n-1))
1-exp(1)^(-n(n-1)/(2*d))
1-exp(1)^(-n*(n-1)/(2*d))
sim.count <- 100000
nomatched.birthdays <-
replicate(sim.count, sample(c(1:365), 25, replace=T)) %>% # simlate rolling 2 die 100K times
t() %>%
apply(MARGIN=1, FUN=anyDuplicated) %>%
as.list %>%
equals(0)
cnt.nomatched.birthdays <- sum(nomatched.birthdays==FALSE)
(probability.25 <- cnt.nomatched.birthdays/sim.count)
n = 50
d = 365
1-exp(1)^(-n*(n-1)/(2*d))
source.1 <- DirSource("enronsent/") #input path for documents
enron.corpus <- Corpus(source.1, readerControl=list(reader=readPlain))
enron.corpus <- enron.corpus %>%
tm_map(content_transformer(function(x) iconv(x, to='UTF-8-MAC', sub='byte')), mc.cores=1)%>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace) %>%
tm_map(content_transformer(tolower))%>%
tm_map(stemDocument)
TDM.enron <- TermDocumentMatrix(enron.corpus)
TDM.printed <- inspect(TDM.enron)
WordFrequencies <- data.frame(Terms = rownames(TDM.printed), Freq = rowSums(TDM.printed))
total.words <- sum(WordFrequencies[[2]])
WordFrequencies$Freq <-WordFrequencies$Freq / total.words
WordFrequencies <- WordFrequencies %>%
arrange(desc(Freq))%>%
tbl_df %>%
print
enron.corpus <- enron.corpus %>%
tm_map(content_transformer(function(x) iconv(x, to='UTF-8-MAC', sub='byte')), mc.cores=1)%>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace) %>%
tm_map(content_transformer(tolower))%>%
tm_map(removeWords, stopwords('english'))%>%
tm_map(stemDocument)
TDM.enron <- TermDocumentMatrix(enron.corpus)
TDM.printed <- inspect(TDM.enron)
WordFrequencies <- data.frame(Terms = rownames(TDM.printed), Freq = rowSums(TDM.printed))
total.words <- sum(WordFrequencies[[2]])
WordFrequencies$Freq <-WordFrequencies$Freq / total.words
WordFrequencies <- WordFrequencies %>%
arrange(desc(Freq))%>%
tbl_df %>%
print
?TermDocumentMatrix
Time <- c(2212, 1986, 1094, 618, 47, 41, 1886, 0.47, 76, 276)
Time <-Time/1000000
cbind(WordFrequencies, Time)
WordFrequencies[1:10]
cbind(WordFrequencies[1:10], Time)
WF <- WordFrequencies[1:10]
WF
str(WF)
WF <- WordFrequencies$Terms[1:10]
WF
str(WF)
WF
terms <- WordFrequencies$Terms[1:10]
terms[1:10]
terms[1]
terms[2]
terms[[1]]
terms[[2]]
unlist(terms)
str(unlist(terms))
str(WordFrequencies)
WordFrequencies
Time <- c(2212, 1986, 1094, 618, 47, 41, 1886, 0.47, 76, 276)
Time <-Time/1000000
Enron <- c(0.015199311,0.006606625,0.006496985,0.006468792,0.006299632,0.005601065,0.005181298,0.005055995,0.005030934,0.004291644)
Terms <- c("wil", "can", "get", "know", "plea", "thank", "time", "ani", "enron", "let")
comparison <- cbind(Terms, Enron, Time)
comparison <- cbind(Terms, Enron, Time)
comparison <- colnames(c("Terms", "Enron", "Time"))
kable(comparison)
require(knitr)
kable(comparison)
table(comparison)
comparison
comparison <- cbind(Terms, Enron, Time)
comparison
table(comparison)
tbl_df(comparison)
